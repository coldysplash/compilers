#line 2 "CoolLexer.cpp"

#line 4 "CoolLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int CoolLexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 63
#define YY_END_OF_BUFFER 64
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[822] =
    {   0,
       60,   60,    4,    4,    9,    9,   13,   13,   64,   62,
       60,   61,    1,   50,   51,   38,   40,   47,   41,   46,
       39,   56,   49,   48,   43,   44,   36,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   52,   53,
       59,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   54,   55,   37,    4,    4,    2,    7,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,   62,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    3,    9,    9,   10,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   13,   13,
       12,   14,   13,   14,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   60,   11,   16,    8,   56,   45,   42,

       57,   57,    0,   57,    0,    0,   57,   57,   19,   19,
       20,   21,    0,   20,   21,   57,    0,    0,   57,   57,
        0,    0,   57,   57,   32,   32,    0,   57,    0,   57,
        0,   57,   59,   58,   58,   58,   58,   58,   58,   19,
       20,   21,   58,   58,   58,   58,   58,   32,   58,   58,
       58,   58,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        5,    6,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       13,   13,   15,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,    0,   57,
        0,   57,    0,    0,   57,   57,    0,    0,   57,   57,
       24,    0,   24,   57,   31,   33,   31,   33,    0,   57,
        0,   57,    0,   57,   58,   58,   58,   58,   58,   58,
       58,   24,   58,   31,   33,   58,   58,   58,   58,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   29,   29,    0,   57,   18,   30,   18,   30,

        0,    0,   57,   57,   25,   25,   26,   26,   27,   27,
        0,   57,   29,   58,   18,   30,   58,   58,   58,   25,
       26,   27,   34,   58,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       17,   17,    0,    0,   57,   57,   28,   28,   17,   35,
       58,   58,   28,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,    0,   23,   57,   23,   58,   23,    4,    4,
        4,    4,    4,    4,    9,    9,    9,    9,    9,    9,
       13,   13,   13,   13,   13,   13,    0,   57,   58,    4,

        4,    4,    9,    9,    9,   13,   13,   13,   22,   22,
       22,    4,    4,    4,    9,    9,    9,   13,   13,   13,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,    1,    1,   18,   19,   20,   21,   22,   23,   24,
       20,   25,   26,   20,   20,   27,   20,   28,   29,   30,
       20,   31,   32,   33,   34,   35,   36,   20,   20,   37,
       38,   39,   40,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   43,   48,   49,   43,   43,   50,   43,   51,
       52,   53,   43,   54,   55,   56,   57,   58,   59,   43,
       43,   43,   60,    1,   61,   62,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[64] =
    {   0,
        1,    1,    2,    3,    4,    1,    4,    1,    1,    1,
        1,    1,    5,    1,    1,    1,    1,    1,    5,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    5,    1,    3,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    1
    } ;

static const flex_int16_t yy_base[835] =
    {   0,
        0,    0,   63,    0,  126,    0,  189,    0,  403, 2633,
      400, 2633, 2633,  394, 2633,  394, 2633, 2633,  389, 2633,
     2633,  384, 2633, 2633,  243, 2633, 2633,    0,  235,  229,
      229,  235,  235,  242,  233,  237,  243,  244, 2633, 2633,
        0,    0,  256,  268,  277,  269,  276,  279,  280,  278,
      284,  285, 2633, 2633, 2633,    0,  394, 2633, 2633,    0,
        0,  389,    0,    0,    0,    0,    0,  379,    0,    0,
      304,    0,    0,  326,  310,  285,  285,  362,  313,  364,
      317,  314,  363,  364,    0,  359,    0,  417,  480,  543,
      388,  418,  588,  423,  480,  481,  420,  485,  544,    0,

        0,    0,    0,    0,  359, 2633,    0,    0,  352,    0,
        0,    0,    0,    0,  344,    0,    0,  334,    0,    0,
      631,  421,  409,  365,  540,  544,  579,  374,  422,  428,
      436,    0,    0,  690,  753,  816,  582,  487,  861,  599,
      690,  691,  547,  592,  695,    0,    0,    0,    0,  354,
     2633,  348,    0,  348,    0,    0,    0,    0,    0,  337,
        0,    0,  336,    0,    0,  904,  684,  689,  475,  748,
      750,  752,  478,  482,  490,  531,    0,    0,  963, 1026,
     1089,  755,  758, 1134,  817,  818,  759,  823,  865,  872,
        0,    0,    0,  347, 2633, 2633, 2633,  335, 2633, 2633,

        0,  533,  556,  558,  578,  594,  597,  628, 2633,    0,
     2633,  623,  677,    0,  698,  689,  692,  737,  755,  809,
      803,  815,  813,  818, 2633,    0,  852,  853,  860,  863,
      861,  869,    0,    0,  866,  882,  870,  924,  941,    0,
        0,  945,  941,  949,  954,  948,  952,    0,  957,  964,
      954,  963,    0,  345,    0,  300,    0,    0,    0,  958,
      973,  975,  963,  977,  965,  979,    0,    0,    0,  991,
      987,    0, 1004,  996, 1000, 1017, 1014, 1019, 1013, 1017,
     1015, 1020,    0,    0, 1026, 1028, 1035, 1036, 1034, 1035,
     2633, 2633, 1189, 1075, 1091, 1092, 1105, 1093, 1094, 1121,

     1137, 1183, 1195, 1190, 1192, 1220, 1236, 1138, 1238, 1241,
     1239, 1258,    0,  274,    0,  261,    0,    0,    0, 1030,
     1073, 1103, 1122, 1140, 1137, 1151,    0,    0,    0, 1187,
     1178,    0, 1190, 1183, 1187, 1219, 1226, 1243, 1238, 1242,
     1240, 1260,    0,    0, 1265, 1272, 1279, 1280, 1278, 1279,
     1328, 1322, 1328, 1329, 1331, 1332, 1334, 1335, 1368, 1373,
     1374, 1375, 1377, 1378, 1380, 1384, 1414, 1419, 1420, 1425,
        0,  271, 2633,  259,    0,    0,    0, 1320, 1338, 1393,
     1408, 1426, 1416, 1430,    0,    0,    0, 1425, 1418,    0,
     1430, 1422, 1425, 1430, 1427, 1450, 1448, 1452, 1450, 1454,

        0,    0, 1459, 1460, 1467, 1468, 1466, 1467, 1516, 1479,
     1516, 1517, 1518, 1519, 1520, 1522, 1538, 1556, 1555, 1566,
     1565, 1576, 1592, 1582, 1601, 1604, 1602, 1614, 1473, 1477,
     1508, 1555, 1568, 1616, 1615, 1618, 1622, 1618, 1626, 1626,
     2633, 1627,    0, 1628, 2633, 2633,    0,    0, 1638, 1639,
     1639, 1641, 1644, 1646, 1651, 1643, 1653, 1656, 1647, 1659,
     1654,    0, 1654,    0,    0, 1658, 1658, 1664, 1664, 1670,
     1672, 1669, 1671, 1681, 1690, 1689, 1692, 1692, 1688, 1696,
     1691,    0, 1691,    0, 1692,    0,    0,    0,    0, 1696,
     1698, 1700, 1701, 1703, 1704, 1714, 1730, 1736, 1746, 1739,

     1756, 1768, 1742, 1774, 1749, 1781, 1784, 1786, 1798, 1788,
     1724, 1786, 1780, 1787, 1799, 1808, 1810, 1818, 1818, 1814,
     1823, 1818,    0, 1819,    0, 1820,    0,    0,    0,    0,
     1824, 1826, 1826, 1827, 1830, 1831, 1840, 1852, 1864, 1874,
     1873, 1885, 1869, 1890, 1903, 1907, 1910, 1917, 1919, 1931,
     1924, 1874, 1902, 1907, 1909, 1919, 1934, 1940, 1947, 1948,
     1943, 1952, 1947,    0, 1949,    0, 1950,    0,    0,    0,
        0, 1955, 1956, 1956, 1957, 1960, 1961, 1970, 1977, 1994,
     2003, 1996, 2006, 2012, 2007, 2031, 2036, 2040, 2041, 2047,
     2053, 2050, 2633,    0, 1982, 2010, 2633, 2633,    0,    0,

     2039, 2045, 2048, 2059, 2633,    0, 2633,    0, 2633,    0,
     2064, 2065,    0, 2064,    0,    0, 2078, 2073, 2079,    0,
        0,    0,    0, 2083,    0,    0, 2075, 2077,    0,    0,
        0,    0, 2081, 2087, 2083, 2089,    0,    0,    0,    0,
        0,    0, 2093, 2094, 2099, 2115, 2104, 2106, 2132, 2131,
     2126, 2142, 2144, 2145, 2161, 2170,    0,    0, 2088, 2089,
        0,    0,    0,    0, 2129, 2141, 2146, 2153,    0,    0,
        0,    0,    0,    0, 2168, 2173, 2179, 2186, 2180, 2182,
     2204, 2206, 2216, 2207, 2220, 2225, 2226, 2232,    0,    0,
     2183, 2185,    0,    0,    0,    0, 2230, 2237, 2233, 2243,

        0,    0,    0,    0,    0,    0, 2248, 2249, 2254, 2258,
     2261, 2264, 2270, 2288, 2283, 2299, 2302, 2304, 2308, 2320,
     2633,    0, 2273, 2279, 2279, 2295, 2633,    0,    0,    0,
     2308, 2314,    0,    0,    0, 2311, 2323, 2322, 2329,    0,
        0, 2334, 2336, 2346, 2358, 2337,    0,    0, 2341, 2347,
     2349, 2359,    0,    0, 2364, 2370, 2375, 2388, 2386,    0,
        0, 2367, 2377, 2383, 2389,    0,    0, 2399, 2400, 2418,
     2421, 2404, 2396, 2633, 2402,    0, 2406,    0, 2414,    0,
     2418,    0, 2442, 2437, 2420,    0, 2422,    0, 2453, 2446,
     2426,    0, 2444,    0, 2464, 2462, 2453, 2458, 2461, 2462,

     2467, 2483, 2469, 2473, 2499, 2475, 2479, 2500, 2633,    0,
        0,    0,    0, 2502,    0,    0, 2516,    0,    0, 2518,
     2633,  265, 2564, 2566, 2572, 2578, 2584, 2590, 2596, 2602,
     2608, 2614, 2620, 2626
    } ;

static const flex_int16_t yy_def[835] =
    {   0,
      821,    1,  821,    3,  821,    5,  821,    7,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  821,  821,
      823,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  821,  821,  821,  825,  825,  821,  821,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,  825,  826,  825,  827,  828,  828,
       90,   90,   90,   90,   90,   90,   90,   90,   90,  825,

      825,  825,  825,  829,  829,  821,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  829,  829,  830,  831,  831,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  829,  829,  829,  832,  832,
      821,  821,  832,  821,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  832,  832,  833,  834,
      834,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      832,  832,  832,  821,  821,  821,  821,  821,  821,  821,

      822,  822,  821,  822,  821,  821,  822,  822,  821,  822,
      821,  821,  821,  822,  822,  822,  821,  821,  822,  822,
      821,  821,  822,  822,  821,  822,  821,  822,  821,  822,
      821,  822,  823,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  825,  825,  825,  825,  825,  825,   74,   74,
      825,   74,  825,  825,   74,   74,  825,   74,  825,  825,
      825,   74,   74,   74,  825,  825,   74,   74,  825,  825,
       74,   74,  825,   74,  825,   74,  825,   74,  825,   74,
      821,  821,  827,   90,   90,   90,   90,   90,   90,   90,

       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,  829,  829,  829,  829,  829,  829,  121,  121,
      829,  121,  829,  829,  121,  121,  829,  121,  829,  829,
      829,  121,  121,  121,  829,  829,  121,  121,  829,  829,
      121,  121,  829,  121,  829,  121,  829,  121,  829,  121,
      830,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      832,  832,  821,  832,  832,  832,  166,  166,  832,  166,
      832,  832,  166,  166,  832,  166,  832,  832,  832,  166,
      166,  166,  832,  832,  166,  166,  832,  832,  166,  166,

      832,  166,  832,  166,  832,  166,  832,  166,  833,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  821,  822,
      821,  822,  821,  821,  822,  822,  821,  821,  822,  822,
      821,  821,  822,  822,  821,  821,  822,  822,  821,  822,
      821,  822,  821,  822,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  825,
       74,  825,   74,  825,  825,   74,   74,  825,  825,   74,
       74,  825,  825,   74,   74,  825,  825,   74,   74,  825,
       74,  825,   74,  825,   74,   90,   90,   90,   90,   90,

       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
      829,  121,  829,  121,  829,  829,  121,  121,  829,  829,
      121,  121,  829,  829,  121,  121,  829,  829,  121,  121,
      829,  121,  829,  121,  829,  121,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  832,  166,  832,  166,  832,  832,  166,  166,  832,
      832,  166,  166,  832,  832,  166,  166,  832,  832,  166,
      166,  832,  166,  832,  166,  832,  166,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  821,  822,  821,  822,  821,  821,  822,  822,

      821,  821,  822,  822,  821,  822,  821,  822,  821,  822,
      821,  822,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  825,   74,  825,   74,  825,  825,
       74,   74,  825,  825,   74,   74,  825,   74,  825,   74,
      825,   74,  825,   74,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,  829,  121,  829,  121,
      829,  829,  121,  121,  829,  829,  121,  121,  829,  121,
      829,  121,  829,  121,  829,  121,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  832,  166,
      832,  166,  832,  832,  166,  166,  832,  832,  166,  166,

      832,  166,  832,  166,  832,  166,  832,  166,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      821,  822,  821,  821,  822,  822,  821,  822,  824,  824,
      824,  824,  824,  825,   74,  825,  825,   74,   74,  825,
       74,   90,   90,   90,   90,   90,  829,  121,  829,  829,
      121,  121,  829,  121,  136,  136,  136,  136,  136,  832,
      166,  832,  832,  166,  166,  832,  166,  181,  181,  181,
      181,  181,  821,  821,  822,  822,  824,  824,  825,  825,
       74,   74,   90,   90,  829,  829,  121,  121,  136,  136,
      832,  832,  166,  166,  181,  181,  821,  822,  824,  825,

       74,   90,  829,  121,  136,  832,  166,  181,  821,  822,
      824,  825,   74,   90,  829,  121,  136,  832,  166,  181,
        0,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821
    } ;

static const flex_int16_t yy_nxt[2697] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   28,
       29,   28,   30,   31,   28,   32,   33,   34,   35,   36,
       28,   28,   37,   28,   28,   38,   28,   39,   10,   40,
       41,   42,   42,   43,   42,   44,   45,   42,   46,   47,
       48,   49,   50,   42,   42,   51,   42,   42,   52,   53,
       54,   55,   10,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   74,   75,   74,   76,   77,   74,   78,   79,
       80,   81,   82,   74,   74,   83,   74,   74,   84,   74,

       85,   86,   87,   88,   89,   89,   90,   89,   91,   92,
       89,   93,   94,   95,   96,   97,   89,   89,   98,   89,
       89,   99,  100,  101,  102,  103,  104,  105,  106,  104,
      107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
      117,  118,  119,  120,  121,  121,  122,  121,  123,  124,
      121,  125,  126,  127,  128,  129,  121,  121,  130,  121,
      121,  131,  121,  132,  104,  133,  134,  135,  135,  136,
      135,  137,  138,  135,  139,  140,  141,  142,  143,  135,
      135,  144,  135,  135,  145,  146,  147,  148,  104,  149,
      150,  151,  149,  152,  153,  154,  155,  156,  157,  158,

      159,  160,  161,  162,  163,  164,  165,  166,  166,  167,
      166,  168,  169,  166,  170,  171,  172,  173,  174,  166,
      166,  175,  166,  166,  176,  166,  177,  149,  178,  179,
      180,  180,  181,  180,  182,  183,  180,  184,  185,  186,
      187,  188,  180,  180,  189,  180,  180,  190,  191,  192,
      193,  149,  199,  202,  209,  205,  225,  217,  211,  200,
      206,  203,  212,  218,  221,  227,  213,  229,  231,  201,
      222,  374,  372,  316,  235,  314,  202,  210,  207,  226,
      219,  214,  236,  208,  204,  215,  220,  223,  228,  216,
      230,  232,  241,  224,  237,  239,  242,  235,  244,  238,

      243,  246,  240,  248,  245,  236,  249,  247,  250,  252,
      267,  263,  256,  257,  251,  241,  264,  237,  239,  242,
      258,  244,  238,  243,  246,  240,  248,  245,  260,  249,
      247,  250,  252,  268,  265,  275,  261,  251,  259,  266,
      283,  276,  285,  317,  259,  375,  254,  198,  194,  374,
      318,  260,  376,  373,  195,  372,  316,  315,  277,  262,
      314,  292,  259,  284,  278,  286,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  269,  279,  287,  289,  270,
      327,  256,  280,  271,  255,  254,  198,  343,  197,  196,

      195,  194,  821,  821,  821,  821,  294,  821,  272,  281,
      288,  290,  273,  328,  297,  282,  274,  253,  253,  298,
      344,  253,  253,  253,  253,  253,  253,  253,  253,  294,
      253,  253,  253,  253,  253,  323,  299,  297,  294,  320,
      324,  294,  298,  300,  294,  304,  294,  321,  309,  294,
      345,  305,  347,  821,  253,  821,  253,  821,  325,  299,
      349,  294,  320,  326,  294,  821,  300,  294,  304,  294,
      322,  309,  294,  346,  305,  348,  253,  253,  253,  253,
      253,  253,  821,  350,  253,  253,  253,  253,  253,  253,
      253,  253,  821,  253,  253,  253,  253,  253,  294,  294,

      385,  401,  306,  294,  308,  357,  294,  294,  307,  310,
      403,  294,  358,  352,  405,  311,  821,  253,  821,  253,
      821,  294,  294,  386,  402,  306,  294,  308,  357,  294,
      294,  307,  310,  404,  294,  358,  352,  406,  311,  253,
      253,  253,  253,  253,  253,  821,  821,  253,  253,  253,
      253,  253,  253,  253,  253,  407,  253,  253,  253,  253,
      253,  295,  294,  329,  429,  352,  335,  330,  312,  296,
      294,  331,  336,  352,  431,  367,  432,  821,  408,  821,
      253,  821,  253,  821,  295,  294,  332,  430,  352,  337,
      333,  312,  296,  294,  334,  338,  352,  431,  367,  432,

      352,  339,  253,  253,  253,  253,  294,  340,  355,  433,
      352,  301,  434,  356,  294,  302,  368,  352,  352,  303,
      821,  362,  369,  352,  341,  352,  821,  363,  433,  294,
      342,  355,  433,  352,  301,  434,  356,  294,  302,  368,
      352,  352,  303,  319,  362,  369,  436,  437,  352,  319,
      363,  435,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  319,  821,  436,
      437,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      313,  313,  821,  313,  313,  313,  313,  313,  313,  313,

      313,  313,  378,  313,  313,  313,  313,  313,  352,  352,
      379,  438,  364,  352,  366,  381,  352,  352,  365,  370,
      382,  352,  437,  438,  441,  378,  821,  313,  313,  313,
      821,  352,  352,  380,  438,  364,  352,  366,  383,  352,
      352,  365,  370,  384,  352,  439,  440,  441,  821,  313,
      313,  313,  313,  313,  313,  821,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  442,  313,  313,  313,  313,
      313,  387,  393,  410,  397,  388,  415,  410,  394,  389,
      398,  413,  424,  416,  410,  410,  414,  441,  442,  821,
      313,  313,  313,  821,  390,  395,  410,  399,  391,  415,

      410,  396,  392,  400,  413,  424,  416,  410,  410,  414,
      443,  821,  313,  313,  313,  313,  313,  313,  821,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  821,  313,
      313,  313,  313,  313,  353,  410,  410,  442,  445,  420,
      422,  410,  354,  410,  410,  421,  423,  446,  445,  410,
      446,  425,  821,  313,  313,  313,  821,  353,  410,  410,
      444,  445,  420,  422,  410,  354,  410,  410,  421,  423,
      446,  447,  410,  448,  425,  313,  313,  313,  313,  352,
      449,  449,  451,  410,  359,  451,  453,  352,  360,  426,
      410,  410,  361,  821,  453,  427,  428,  455,  410,  821,

      456,  457,  352,  449,  450,  451,  410,  359,  452,  453,
      352,  360,  426,  410,  410,  361,  377,  454,  427,  428,
      455,  410,  377,  456,  457,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      377,  821,  458,  821,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  371,  371,  458,  371,  459,  371,  460,
      371,  371,  371,  371,  371,  461,  371,  371,  371,  371,
      371,  462,  463,  464,  465,  466,  467,  468,  469,  470,
      459,  472,  460,  473,  474,  475,  474,  477,  461,  821,

      371,  371,  371,  821,  462,  463,  464,  465,  466,  467,
      468,  469,  471,  821,  472,  478,  473,  474,  475,  476,
      477,  479,  371,  371,  371,  371,  371,  371,  478,  371,
      479,  371,  482,  371,  371,  371,  371,  371,  478,  371,
      371,  371,  371,  371,  479,  483,  482,  483,  486,  487,
      486,  480,  487,  481,  490,  482,  490,  492,  492,  494,
      494,  511,  821,  371,  371,  371,  821,  821,  483,  484,
      485,  486,  487,  488,  821,  489,  821,  490,  821,  491,
      492,  493,  494,  495,  512,  371,  371,  371,  371,  371,
      371,  513,  371,  294,  371,  821,  371,  371,  371,  371,

      371,  294,  371,  371,  371,  371,  371,  411,  821,  294,
      497,  499,  294,  821,  513,  412,  294,  294,  294,  294,
      500,  514,  496,  294,  294,  821,  371,  371,  371,  821,
      411,  294,  294,  497,  499,  294,  498,  821,  412,  294,
      294,  294,  294,  500,  514,  496,  294,  294,  371,  371,
      371,  371,  410,  515,  294,  294,  294,  417,  516,  498,
      410,  418,  294,  294,  294,  419,  821,  821,  515,  518,
      294,  821,  821,  821,  821,  410,  515,  821,  294,  294,
      417,  516,  821,  410,  418,  821,  294,  294,  419,  253,
      253,  517,  518,  253,  253,  253,  253,  253,  253,  253,

      253,  294,  253,  253,  253,  253,  253,  501,  294,  294,
      294,  519,  520,  294,  519,  821,  294,  520,  294,  523,
      504,  294,  503,  821,  294,  821,  253,  821,  253,  502,
      501,  294,  294,  294,  519,  520,  294,  521,  294,  294,
      522,  294,  523,  504,  294,  503,  294,  524,  253,  253,
      253,  253,  502,  821,  294,  505,  294,  294,  523,  294,
      821,  294,  294,  508,  294,  294,  507,  294,  506,  294,
      524,  524,  509,  527,  528,  527,  294,  294,  505,  294,
      294,  525,  294,  510,  294,  294,  508,  294,  294,  507,
      294,  506,  528,  531,  526,  509,  527,  528,  529,  294,

      531,  533,  533,  535,  535,  821,  510,  294,  821,  821,
      821,  821,  821,  821,  821,  530,  531,  821,  821,  821,
      821,  821,  821,  532,  533,  534,  535,  536,  313,  313,
      821,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      352,  313,  313,  313,  313,  313,  352,  538,  352,  352,
      540,  552,  352,  352,  352,  352,  554,  352,  352,  537,
      541,  352,  539,  352,  821,  313,  313,  313,  821,  352,
      538,  352,  352,  540,  553,  352,  352,  352,  352,  554,
      352,  352,  537,  541,  352,  539,  352,  313,  313,  313,
      313,  352,  352,  352,  352,  352,  352,  542,  352,  352,

      352,  352,  352,  352,  352,  545,  352,  544,  543,  352,
      352,  555,  547,  546,  352,  352,  352,  352,  352,  352,
      542,  352,  352,  352,  352,  352,  352,  352,  545,  352,
      544,  543,  352,  352,  555,  547,  546,  352,  352,  556,
      352,  549,  548,  352,  557,  352,  352,  556,  559,  560,
      551,  352,  561,  550,  560,  352,  561,  564,  565,  564,
      352,  352,  556,  352,  549,  548,  352,  557,  352,  352,
      558,  559,  560,  551,  352,  561,  550,  562,  565,  563,
      564,  565,  566,  568,  569,  568,  569,  572,  572,  574,
      574,  576,  576,  821,  821,  593,  821,  410,  821,  593,

      821,  567,  821,  821,  821,  410,  568,  569,  570,  571,
      572,  573,  574,  575,  576,  577,  371,  371,  593,  371,
      410,  371,  594,  371,  371,  371,  371,  371,  410,  371,
      371,  371,  371,  371,  410,  579,  410,  581,  410,  595,
      410,  821,  410,  410,  410,  410,  582,  578,  410,  580,
      821,  821,  821,  371,  371,  371,  410,  410,  579,  410,
      581,  410,  595,  410,  410,  410,  410,  410,  410,  582,
      578,  410,  580,  410,  410,  371,  371,  371,  371,  410,
      583,  410,  410,  410,  410,  821,  595,  410,  821,  584,
      597,  410,  410,  586,  410,  821,  410,  410,  585,  821,

      410,  821,  410,  583,  410,  410,  410,  410,  410,  596,
      410,  587,  584,  597,  410,  410,  586,  410,  410,  410,
      410,  585,  410,  410,  588,  410,  590,  410,  410,  589,
      410,  410,  410,  410,  587,  591,  598,  597,  598,  592,
      410,  410,  410,  410,  601,  410,  602,  588,  601,  590,
      410,  410,  589,  410,  602,  410,  605,  605,  591,  598,
      599,  600,  592,  410,  607,  607,  609,  601,  609,  602,
      611,  603,  611,  613,  614,  615,  616,  604,  617,  605,
      606,  618,  619,  620,  621,  622,  623,  607,  608,  609,
      624,  610,  625,  611,  625,  612,  613,  614,  615,  616,

      627,  617,  627,  629,  618,  619,  620,  621,  622,  623,
      630,  629,  630,  624,  633,  625,  634,  626,  633,  634,
      637,  637,  639,  627,  639,  628,  629,  641,  641,  643,
      643,  821,  294,  630,  631,  632,  645,  633,  821,  634,
      294,  635,  636,  637,  638,  639,  657,  640,  294,  821,
      641,  642,  643,  644,  294,  294,  294,  294,  647,  645,
      294,  646,  294,  294,  294,  294,  648,  294,  294,  657,
      649,  294,  294,  821,  294,  294,  821,  294,  650,  294,
      294,  647,  294,  294,  646,  294,  294,  294,  294,  648,
      294,  294,  294,  649,  294,  294,  651,  294,  294,  294,

      294,  650,  294,  652,  294,  294,  294,  294,  657,  294,
      653,  659,  294,  654,  656,  294,  294,  294,  659,  651,
      655,  661,  294,  294,  294,  294,  652,  294,  662,  294,
      294,  658,  661,  653,  659,  294,  654,  656,  662,  294,
      665,  660,  666,  655,  661,  665,  666,  294,  669,  669,
      671,  662,  671,  673,  673,  663,  675,  675,  352,  821,
      821,  664,  677,  665,  821,  666,  352,  821,  667,  668,
      352,  669,  670,  671,  821,  672,  673,  674,  352,  675,
      676,  352,  352,  678,  821,  677,  679,  352,  821,  352,
      352,  352,  352,  352,  680,  352,  689,  683,  821,  352,

      352,  352,  821,  352,  681,  352,  678,  682,  352,  679,
      352,  352,  821,  352,  352,  352,  352,  680,  352,  689,
      683,  352,  352,  352,  689,  352,  352,  681,  352,  352,
      682,  352,  684,  352,  352,  352,  352,  352,  691,  352,
      691,  693,  352,  685,  352,  352,  686,  690,  352,  352,
      688,  352,  352,  687,  694,  684,  352,  352,  352,  352,
      352,  691,  693,  692,  693,  352,  685,  694,  352,  686,
      697,  698,  352,  688,  697,  698,  687,  694,  701,  701,
      352,  703,  703,  705,  705,  695,  707,  707,  410,  821,
      696,  821,  709,  697,  698,  410,  410,  699,  700,  821,

      821,  701,  702,  410,  703,  704,  705,  706,  710,  707,
      708,  410,  410,  721,  410,  709,  711,  821,  410,  410,
      410,  410,  410,  712,  410,  410,  410,  713,  714,  410,
      410,  710,  410,  410,  821,  410,  721,  410,  410,  711,
      715,  721,  821,  410,  410,  410,  712,  410,  410,  410,
      713,  714,  410,  410,  410,  410,  410,  410,  410,  410,
      716,  410,  410,  715,  722,  410,  410,  717,  410,  723,
      724,  410,  410,  410,  718,  719,  720,  410,  723,  410,
      410,  410,  410,  716,  724,  410,  727,  727,  410,  410,
      717,  410,  723,  724,  410,  729,  410,  718,  719,  720,

      730,  725,  410,  731,  732,  733,  734,  726,  734,  727,
      728,  736,  737,  736,  737,  740,  740,  294,  729,  747,
      747,  821,  294,  730,  294,  294,  731,  732,  733,  734,
      294,  735,  294,  294,  736,  737,  738,  739,  740,  741,
      294,  294,  747,  748,  294,  294,  742,  294,  294,  294,
      294,  745,  294,  294,  743,  294,  294,  294,  294,  749,
      294,  744,  294,  294,  294,  821,  750,  294,  294,  742,
      294,  294,  294,  294,  745,  294,  749,  743,  750,  294,
      294,  294,  749,  294,  744,  294,  294,  294,  294,  750,
      753,  294,  746,  294,  294,  753,  294,  352,  352,  751,

      352,  752,  294,  821,  352,  352,  352,  821,  352,  821,
      294,  294,  352,  753,  760,  746,  760,  755,  754,  294,
      352,  352,  352,  352,  352,  352,  756,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  757,  760,  352,  761,
      755,  758,  352,  352,  352,  352,  352,  352,  352,  756,
      352,  352,  352,  352,  759,  352,  352,  352,  352,  757,
      762,  352,  763,  762,  758,  352,  352,  352,  763,  352,
      766,  766,  410,  352,  352,  352,  410,  759,  821,  410,
      410,  352,  410,  762,  410,  763,  764,  410,  410,  768,
      410,  765,  769,  766,  767,  410,  410,  821,  773,  410,

      774,  410,  410,  410,  773,  410,  410,  410,  771,  410,
      410,  410,  768,  410,  410,  769,  774,  410,  770,  410,
      410,  773,  410,  774,  410,  410,  410,  775,  410,  410,
      410,  771,  410,  777,  410,  778,  779,  410,  410,  776,
      410,  770,  772,  410,  780,  410,  410,  779,  410,  410,
      780,  410,  294,  410,  294,  294,  777,  410,  778,  779,
      294,  410,  294,  294,  294,  772,  785,  780,  786,  410,
      781,  783,  294,  782,  785,  294,  294,  294,  294,  784,
      786,  821,  352,  294,  294,  294,  294,  294,  352,  785,
      352,  786,  791,  352,  783,  294,  352,  787,  792,  294,

      789,  352,  784,  788,  352,  352,  352,  294,  791,  790,
      792,  352,  352,  352,  352,  791,  352,  410,  410,  352,
      821,  792,  410,  789,  352,  410,  410,  352,  797,  352,
      410,  793,  790,  794,  797,  352,  410,  352,  799,  410,
      410,  410,  796,  795,  410,  410,  800,  410,  410,  410,
      800,  797,  803,  410,  803,  294,  821,  798,  806,  410,
      294,  799,  410,  294,  352,  796,  795,  410,  294,  800,
      410,  352,  352,  801,  802,  803,  806,  804,  294,  352,
      410,  806,  410,  294,  809,  805,  294,  352,  410,  809,
      410,  294,  811,  812,  352,  352,  808,  802,  812,  807,

      815,  294,  352,  410,  815,  410,  818,  809,  805,  294,
      818,  410,  810,  410,  814,  811,  812,  352,  410,  808,
      294,  813,  821,  815,  294,  352,  410,  816,  294,  818,
      817,  820,  294,  819,  352,  821,  410,  814,  821,  821,
      352,  410,  352,  294,  410,  821,  821,  821,  352,  410,
      821,  294,  821,  817,  820,  821,  821,  352,  821,  410,
      821,  821,  821,  821,  821,  352,  821,  410,  233,  233,
      234,  234,  253,  821,  821,  253,  253,  253,  291,  291,
      291,  291,  291,  291,  293,  821,  821,  293,  293,  293,
      294,  821,  821,  294,  294,  294,  313,  821,  313,  313,

      313,  313,  351,  821,  351,  351,  351,  351,  352,  821,
      352,  352,  352,  352,  371,  821,  371,  821,  371,  371,
      409,  821,  409,  821,  409,  409,  410,  821,  410,  821,
      410,  410,    9,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821

    } ;

static const flex_int16_t yy_chk[2697] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,   25,   29,   31,   30,   35,   33,   32,   25,
       30,   29,   32,   33,   34,   36,   32,   37,   38,  822,
       34,  374,  372,  316,   43,  314,   29,   31,   30,   35,
       33,   32,   43,   30,   29,   32,   33,   34,   36,   32,
       37,   38,   46,   34,   44,   45,   46,   43,   47,   44,

       46,   48,   45,   49,   47,   43,   50,   48,   51,   52,
       77,   76,  256,   71,   51,   46,   76,   44,   45,   46,
       71,   47,   44,   46,   48,   45,   49,   47,   75,   50,
       48,   51,   52,   77,   76,   79,   75,   51,   74,   76,
       81,   79,   82,  118,   74,  163,  254,  198,  194,  160,
      118,   75,  163,  154,  152,  150,  115,  109,   79,   75,
      105,   86,   74,   81,   79,   82,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   78,   80,   83,   84,   78,
      124,   68,   80,   78,   62,   57,   22,  128,   19,   16,

       14,   11,    9,    0,    0,    0,   91,    0,   78,   80,
       83,   84,   78,  124,   91,   80,   78,   88,   88,   91,
      128,   88,   88,   88,   88,   88,   88,   88,   88,   91,
       88,   88,   88,   88,   88,  123,   92,   91,   97,  122,
      123,   94,   91,   92,   92,   94,   97,  122,   97,   94,
      129,   94,  130,    0,   88,    0,   88,    0,  123,   92,
      131,   97,  122,  123,   94,    0,   92,   92,   94,   97,
      122,   97,   94,  129,   94,  130,   88,   88,   88,   88,
       89,   89,    0,  131,   89,   89,   89,   89,   89,   89,
       89,   89,    0,   89,   89,   89,   89,   89,   95,   96,

      169,  173,   95,   98,   96,  138,   95,   96,   95,   98,
      174,   98,  138,  138,  175,   98,    0,   89,    0,   89,
        0,   95,   96,  169,  173,   95,   98,   96,  138,   95,
       96,   95,   98,  174,   98,  138,  138,  175,   98,   89,
       89,   89,   89,   90,   90,    0,    0,   90,   90,   90,
       90,   90,   90,   90,   90,  176,   90,   90,   90,   90,
       90,   90,   99,  125,  202,  143,  126,  125,   99,   90,
       99,  125,  126,  143,  203,  143,  204,    0,  176,    0,
       90,    0,   90,    0,   90,   99,  125,  202,  143,  126,
      125,   99,   90,   99,  125,  126,  143,  203,  143,  204,

      137,  127,   90,   90,   90,   90,   93,  127,  137,  205,
      144,   93,  206,  137,   93,   93,  144,  140,  144,   93,
        0,  140,  144,  137,  127,  140,    0,  140,  207,   93,
      127,  137,  205,  144,   93,  206,  137,   93,   93,  144,
      140,  144,   93,  121,  140,  144,  208,  212,  140,  121,
      140,  207,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  121,    0,  208,
      212,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      134,  134,    0,  134,  134,  134,  134,  134,  134,  134,

      134,  134,  167,  134,  134,  134,  134,  134,  141,  142,
      167,  213,  141,  145,  142,  168,  141,  142,  141,  145,
      168,  145,  215,  216,  217,  167,    0,  134,  134,  134,
        0,  141,  142,  167,  213,  141,  145,  142,  168,  141,
      142,  141,  145,  168,  145,  215,  216,  217,    0,  134,
      134,  134,  134,  135,  135,    0,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  218,  135,  135,  135,  135,
      135,  170,  171,  182,  172,  170,  183,  187,  171,  170,
      172,  182,  187,  183,  183,  187,  182,  219,  218,    0,
      135,  135,  135,    0,  170,  171,  182,  172,  170,  183,

      187,  171,  170,  172,  182,  187,  183,  183,  187,  182,
      219,    0,  135,  135,  135,  135,  136,  136,    0,  136,
      136,  136,  136,  136,  136,  136,  136,  136,    0,  136,
      136,  136,  136,  136,  136,  185,  186,  220,  221,  185,
      186,  188,  136,  185,  186,  185,  186,  222,  223,  188,
      224,  188,    0,  136,  136,  136,    0,  136,  185,  186,
      220,  221,  185,  186,  188,  136,  185,  186,  185,  186,
      222,  223,  188,  224,  188,  136,  136,  136,  136,  139,
      227,  228,  229,  189,  139,  230,  231,  139,  139,  189,
      190,  189,  139,    0,  232,  189,  190,  235,  190,    0,

      236,  237,  139,  227,  228,  229,  189,  139,  230,  231,
      139,  139,  189,  190,  189,  139,  166,  232,  189,  190,
      235,  190,  166,  236,  237,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      166,    0,  238,    0,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  179,  179,  238,  179,  239,  179,  242,
      179,  179,  179,  179,  179,  243,  179,  179,  179,  179,
      179,  244,  245,  246,  247,  249,  250,  251,  252,  260,
      239,  261,  242,  262,  263,  264,  265,  266,  243,    0,

      179,  179,  179,    0,  244,  245,  246,  247,  249,  250,
      251,  252,  260,    0,  261,  270,  262,  263,  264,  265,
      266,  271,  179,  179,  179,  179,  180,  180,  273,  180,
      274,  180,  275,  180,  180,  180,  180,  180,  270,  180,
      180,  180,  180,  180,  271,  276,  277,  278,  279,  280,
      281,  273,  282,  274,  285,  275,  286,  287,  288,  289,
      290,  320,    0,  180,  180,  180,    0,    0,  276,  277,
      278,  279,  280,  281,    0,  282,    0,  285,    0,  286,
      287,  288,  289,  290,  320,  180,  180,  180,  180,  181,
      181,  321,  181,  294,  181,    0,  181,  181,  181,  181,

      181,  294,  181,  181,  181,  181,  181,  181,    0,  295,
      296,  298,  299,    0,  321,  181,  294,  295,  296,  298,
      299,  322,  295,  297,  294,    0,  181,  181,  181,    0,
      181,  297,  295,  296,  298,  299,  297,    0,  181,  300,
      295,  296,  298,  299,  322,  295,  297,  300,  181,  181,
      181,  181,  184,  323,  297,  301,  308,  184,  324,  297,
      184,  184,  300,  301,  308,  184,    0,    0,  325,  326,
      300,    0,    0,    0,    0,  184,  323,    0,  301,  308,
      184,  324,    0,  184,  184,    0,  301,  308,  184,  293,
      293,  325,  326,  293,  293,  293,  293,  293,  293,  293,

      293,  302,  293,  293,  293,  293,  293,  302,  304,  302,
      305,  330,  331,  303,  333,    0,  304,  334,  305,  335,
      305,  303,  304,    0,  302,    0,  293,    0,  293,  303,
      302,  304,  302,  305,  330,  331,  303,  333,  306,  304,
      334,  305,  335,  305,  303,  304,  306,  336,  293,  293,
      293,  293,  303,    0,  307,  306,  309,  311,  337,  310,
        0,  306,  307,  310,  309,  311,  309,  310,  307,  306,
      336,  338,  311,  339,  340,  341,  312,  307,  306,  309,
      311,  337,  310,  312,  312,  307,  310,  309,  311,  309,
      310,  307,  342,  345,  338,  311,  339,  340,  341,  312,

      346,  347,  348,  349,  350,    0,  312,  312,    0,    0,
        0,    0,    0,    0,    0,  342,  345,    0,    0,    0,
        0,    0,    0,  346,  347,  348,  349,  350,  351,  351,
        0,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      352,  351,  351,  351,  351,  351,  353,  354,  352,  355,
      356,  378,  357,  358,  353,  354,  379,  355,  356,  353,
      357,  358,  355,  352,    0,  351,  351,  351,    0,  353,
      354,  352,  355,  356,  378,  357,  358,  353,  354,  379,
      355,  356,  353,  357,  358,  355,  359,  351,  351,  351,
      351,  360,  361,  362,  359,  363,  364,  360,  365,  360,

      361,  362,  366,  363,  364,  363,  365,  362,  361,  359,
      366,  380,  365,  364,  360,  361,  362,  359,  363,  364,
      360,  365,  360,  361,  362,  366,  363,  364,  363,  365,
      362,  361,  367,  366,  380,  365,  364,  368,  369,  381,
      367,  368,  367,  370,  382,  368,  369,  383,  384,  388,
      370,  370,  389,  369,  391,  367,  392,  393,  394,  395,
      368,  369,  381,  367,  368,  367,  370,  382,  368,  369,
      383,  384,  388,  370,  370,  389,  369,  391,  396,  392,
      393,  394,  395,  397,  398,  399,  400,  403,  404,  405,
      406,  407,  408,    0,    0,  429,    0,  410,    0,  430,

        0,  396,    0,    0,    0,  410,  397,  398,  399,  400,
      403,  404,  405,  406,  407,  408,  409,  409,  429,  409,
      410,  409,  430,  409,  409,  409,  409,  409,  410,  409,
      409,  409,  409,  409,  411,  412,  413,  414,  415,  431,
      416,    0,  411,  412,  413,  414,  415,  411,  416,  413,
        0,    0,    0,  409,  409,  409,  417,  411,  412,  413,
      414,  415,  431,  416,  417,  411,  412,  413,  414,  415,
      411,  416,  413,  419,  418,  409,  409,  409,  409,  417,
      418,  419,  418,  421,  420,    0,  432,  417,    0,  419,
      433,  421,  420,  421,  422,    0,  419,  418,  420,    0,

      424,    0,  422,  418,  419,  418,  421,  420,  424,  432,
      423,  422,  419,  433,  421,  420,  421,  422,  423,  425,
      427,  420,  426,  424,  423,  422,  426,  425,  427,  425,
      426,  424,  428,  423,  422,  427,  434,  435,  436,  428,
      428,  423,  425,  427,  437,  426,  438,  423,  439,  426,
      425,  427,  425,  426,  440,  428,  442,  444,  427,  434,
      435,  436,  428,  428,  449,  450,  451,  437,  452,  438,
      453,  439,  454,  455,  456,  457,  458,  440,  459,  442,
      444,  460,  461,  463,  466,  467,  468,  449,  450,  451,
      469,  452,  470,  453,  471,  454,  455,  456,  457,  458,

      472,  459,  473,  474,  460,  461,  463,  466,  467,  468,
      475,  476,  477,  469,  478,  470,  479,  471,  480,  481,
      483,  485,  490,  472,  491,  473,  474,  492,  493,  494,
      495,    0,  496,  475,  476,  477,  496,  478,    0,  479,
      496,  480,  481,  483,  485,  490,  511,  491,  497,    0,
      492,  493,  494,  495,  498,  496,  497,  500,  498,  496,
      503,  497,  498,  496,  499,  500,  499,  505,  503,  511,
      500,  497,  499,    0,  501,  505,    0,  498,  501,  497,
      500,  498,  501,  503,  497,  498,  502,  499,  500,  499,
      505,  503,  504,  500,  502,  499,  502,  501,  505,  506,

      504,  501,  507,  504,  508,  501,  510,  506,  512,  502,
      507,  513,  508,  508,  510,  504,  509,  502,  514,  502,
      509,  515,  506,  504,  509,  507,  504,  508,  516,  510,
      506,  512,  517,  507,  513,  508,  508,  510,  518,  509,
      519,  514,  520,  509,  515,  521,  522,  509,  524,  526,
      531,  516,  532,  533,  534,  517,  535,  536,  537,    0,
        0,  518,  537,  519,    0,  520,  537,    0,  521,  522,
      538,  524,  526,  531,    0,  532,  533,  534,  538,  535,
      536,  537,  539,  538,    0,  537,  539,  543,    0,  537,
      539,  541,  540,  538,  540,  543,  552,  543,    0,  541,

      540,  538,    0,  542,  541,  539,  538,  542,  544,  539,
      543,  542,    0,  539,  541,  540,  544,  540,  543,  552,
      543,  545,  541,  540,  553,  546,  542,  541,  547,  545,
      542,  544,  545,  546,  542,  548,  547,  549,  554,  544,
      555,  556,  551,  548,  545,  549,  549,  553,  546,  550,
      551,  547,  545,  550,  557,  545,  546,  550,  548,  547,
      549,  554,  558,  555,  556,  551,  548,  559,  549,  549,
      560,  561,  550,  551,  562,  563,  550,  557,  565,  567,
      550,  572,  573,  574,  575,  558,  576,  577,  578,    0,
      559,    0,  578,  560,  561,  579,  578,  562,  563,    0,

        0,  565,  567,  579,  572,  573,  574,  575,  579,  576,
      577,  578,  580,  595,  582,  578,  580,    0,  579,  578,
      580,  581,  582,  581,  583,  585,  579,  582,  583,  581,
      584,  579,  583,  585,    0,  580,  595,  582,  584,  580,
      584,  596,    0,  580,  581,  582,  581,  583,  585,  586,
      582,  583,  581,  584,  587,  583,  585,  586,  588,  589,
      586,  584,  587,  584,  596,  590,  588,  589,  592,  601,
      602,  591,  586,  590,  590,  591,  592,  587,  603,  591,
      586,  588,  589,  586,  604,  587,  611,  612,  590,  588,
      589,  592,  601,  602,  591,  614,  590,  590,  591,  592,

      617,  603,  591,  618,  619,  624,  627,  604,  628,  611,
      612,  633,  634,  635,  636,  643,  644,  645,  614,  659,
      660,    0,  647,  617,  648,  645,  618,  619,  624,  627,
      647,  628,  648,  646,  633,  634,  635,  636,  643,  644,
      645,  646,  659,  660,  651,  647,  646,  648,  645,  650,
      649,  651,  651,  647,  649,  648,  646,  650,  649,  665,
      652,  650,  653,  654,  646,    0,  666,  651,  652,  646,
      653,  654,  650,  649,  651,  651,  667,  649,  668,  655,
      650,  649,  665,  652,  650,  653,  654,  655,  656,  666,
      675,  652,  656,  653,  654,  676,  656,  677,  679,  667,

      680,  668,  655,    0,  678,  677,  679,    0,  680,    0,
      655,  656,  678,  675,  691,  656,  692,  678,  676,  656,
      677,  679,  681,  680,  682,  684,  681,  678,  677,  679,
      681,  680,  682,  684,  683,  678,  682,  691,  685,  692,
      678,  683,  683,  686,  687,  681,  685,  682,  684,  681,
      688,  686,  687,  681,  688,  682,  684,  683,  688,  682,
      697,  685,  698,  699,  683,  683,  686,  687,  700,  685,
      707,  708,  709,  688,  686,  687,  710,  688,    0,  711,
      709,  688,  712,  697,  710,  698,  699,  711,  713,  710,
      712,  700,  713,  707,  708,  709,  713,    0,  723,  710,

      724,  715,  711,  709,  725,  712,  714,  710,  715,  715,
      711,  713,  710,  712,  714,  713,  726,  716,  714,  713,
      717,  723,  718,  724,  715,  716,  719,  725,  717,  714,
      718,  715,  715,  731,  719,  732,  736,  714,  720,  726,
      716,  714,  720,  717,  737,  718,  720,  738,  716,  719,
      739,  717,  742,  718,  743,  746,  731,  719,  732,  736,
      742,  720,  743,  746,  744,  720,  749,  737,  750,  720,
      738,  744,  744,  739,  751,  742,  745,  743,  746,  745,
      752,    0,  755,  742,  745,  743,  746,  744,  756,  749,
      755,  750,  762,  757,  744,  744,  756,  751,  763,  745,

      757,  757,  745,  752,  759,  755,  758,  745,  764,  758,
      765,  756,  759,  755,  758,  762,  757,  768,  769,  756,
        0,  763,  772,  757,  757,  768,  769,  759,  773,  758,
      772,  764,  758,  765,  775,  759,  770,  758,  777,  771,
      768,  769,  771,  770,  770,  772,  779,  771,  768,  769,
      781,  773,  785,  772,  787,  784,    0,  775,  791,  770,
      783,  777,  771,  784,  790,  771,  770,  770,  783,  779,
      771,  789,  790,  781,  783,  785,  793,  787,  784,  789,
      796,  791,  795,  783,  797,  789,  784,  790,  796,  798,
      795,  783,  799,  800,  789,  790,  795,  783,  801,  793,

      803,  802,  789,  796,  804,  795,  806,  797,  789,  802,
      807,  796,  798,  795,  802,  799,  800,  805,  808,  795,
      814,  801,    0,  803,  802,  805,  808,  804,  814,  806,
      805,  808,  802,  807,  817,    0,  820,  802,    0,    0,
      805,  808,  817,  814,  820,    0,    0,    0,  805,  808,
        0,  814,    0,  805,  808,    0,    0,  817,    0,  820,
        0,    0,    0,    0,    0,  817,    0,  820,  823,  823,
      824,  824,  825,    0,    0,  825,  825,  825,  826,  826,
      826,  826,  826,  826,  827,    0,    0,  827,  827,  827,
      828,    0,    0,  828,  828,  828,  829,    0,  829,  829,

      829,  829,  830,    0,  830,  830,  830,  830,  831,    0,
      831,  831,  831,  831,  832,    0,  832,    0,  832,  832,
      833,    0,  833,    0,  833,  833,  834,    0,  834,    0,
      834,  834,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821

    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[64] =
    {   0,
0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./CoolLexer.flex"
#line 2 "./CoolLexer.flex"
#include <iostream>
#include <fstream>
#include <cstdio>
#include <string>

#include "Parser.h"
#include "CoolLexer.h"

#undef YY_DECL
#define YY_DECL int CoolLexer::yylex()

#line 1313 "CoolLexer.cpp"

#line 1315 "CoolLexer.cpp"

#define INITIAL 0
#define STR 1
#define COMMENT_INLINE 2
#define COMMENT 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 26 "./CoolLexer.flex"


#line 1453 "CoolLexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 822 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 821 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_more_len); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 28 "./CoolLexer.flex"
{   yymore(); BEGIN(STR);   }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 29 "./CoolLexer.flex"
{   Error("Wrong newline in string"); 
                            BEGIN(INITIAL); 
                            lineno++; 
                            return TOKEN_BAD_STRING;
                        }
	YY_BREAK
case YY_STATE_EOF(STR):
#line 34 "./CoolLexer.flex"
{   Error("EOF in string"); 
                            BEGIN(INITIAL); 
                            return TOKEN_BAD_STRING; 
                        }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 38 "./CoolLexer.flex"
{   BEGIN(INITIAL); 
                            Error("Can't use \\0 in strings");  
                            yymore(); 
                            return TOKEN_BAD_STRING; 
                        }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 44 "./CoolLexer.flex"
{yymore();}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 45 "./CoolLexer.flex"
{yymore();}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 46 "./CoolLexer.flex"
{lineno++; yymore();}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 47 "./CoolLexer.flex"
{Escape(); BEGIN(INITIAL); return TOKEN_STRING;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 49 "./CoolLexer.flex"
{BEGIN(COMMENT_INLINE);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 50 "./CoolLexer.flex"
{}
	YY_BREAK
case YY_STATE_EOF(COMMENT_INLINE):
#line 51 "./CoolLexer.flex"
{BEGIN(INITIAL);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 52 "./CoolLexer.flex"
{lineno++; BEGIN(INITIAL);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 54 "./CoolLexer.flex"
{comment_level++; BEGIN(COMMENT);}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 56 "./CoolLexer.flex"
{ Error("EOF in comment"); BEGIN(INITIAL); return ERROR; }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 57 "./CoolLexer.flex"
{ lineno++; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "./CoolLexer.flex"
{ }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "./CoolLexer.flex"
{ }  
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "./CoolLexer.flex"
{
                            comment_level--;
                            if (comment_level == 0) {
                                BEGIN(INITIAL);            
                            }
                          }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 66 "./CoolLexer.flex"
{ Error("Unmatched comment ending"); BEGIN(INITIAL); return ERROR; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 68 "./CoolLexer.flex"
return TOKEN_KEYWORD_CLASS;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 69 "./CoolLexer.flex"
return TOKEN_KEYWORD_ELSE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 70 "./CoolLexer.flex"
return TOKEN_KEYWORD_FI;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 71 "./CoolLexer.flex"
return TOKEN_KEYWORD_ELSE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 72 "./CoolLexer.flex"
return TOKEN_KEYWORD_IN;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 73 "./CoolLexer.flex"
return TOKEN_KEYWORD_INHERITS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 74 "./CoolLexer.flex"
return TOKEN_KEYWORD_ISVOID;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 75 "./CoolLexer.flex"
return TOKEN_KEYWORD_LET;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 76 "./CoolLexer.flex"
return TOKEN_KEYWORD_LOOP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 77 "./CoolLexer.flex"
return TOKEN_KEYWORD_POOL;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 78 "./CoolLexer.flex"
return TOKEN_KEYWORD_THEN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 79 "./CoolLexer.flex"
return TOKEN_KEYWORD_WHILE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "./CoolLexer.flex"
return TOKEN_KEYWORD_CASE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "./CoolLexer.flex"
return TOKEN_KEYWORD_ESAC;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "./CoolLexer.flex"
return TOKEN_KEYWORD_NEW;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "./CoolLexer.flex"
return TOKEN_KEYWORD_OF;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "./CoolLexer.flex"
return TOKEN_KEYWORD_NOT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "./CoolLexer.flex"
return TOKEN_KEYWORD_TRUE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "./CoolLexer.flex"
return TOKEN_KEYWORD_FALSE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 88 "./CoolLexer.flex"
return TOKEN_AT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 89 "./CoolLexer.flex"
return TOKEN_TILDE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 90 "./CoolLexer.flex"
return TOKEN_MUL;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 91 "./CoolLexer.flex"
return TOKEN_DIV;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 92 "./CoolLexer.flex"
return TOKEN_PLUS;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 93 "./CoolLexer.flex"
return TOKEN_MINUS;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 94 "./CoolLexer.flex"
return TOKEN_LESS_EQUAL;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 95 "./CoolLexer.flex"
return TOKEN_LESS;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 96 "./CoolLexer.flex"
return TOKEN_EQUAL;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 97 "./CoolLexer.flex"
return TOKEN_ASSIGNMENT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 98 "./CoolLexer.flex"
return TOKEN_DOT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 99 "./CoolLexer.flex"
return TOKEN_COMMA;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 100 "./CoolLexer.flex"
return TOKEN_SEMICOLON;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 101 "./CoolLexer.flex"
return TOKEN_COLON;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 102 "./CoolLexer.flex"
return TOKEN_OPEN_REGULAR;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 103 "./CoolLexer.flex"
return TOKEN_CLOSE_REGULAR;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 104 "./CoolLexer.flex"
return TOKEN_OPEN_SQUARE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 105 "./CoolLexer.flex"
return TOKEN_CLOSE_SQUARE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "./CoolLexer.flex"
return TOKEN_OPEN_BLOCK;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "./CoolLexer.flex"
return TOKEN_CLOSE_BLOCK;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 109 "./CoolLexer.flex"
return TOKEN_INT_DIGITS;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "./CoolLexer.flex"
return TOKEN_TYPE_IDENTIFER;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "./CoolLexer.flex"
return TOKEN_OBJECT_IDENTIFER;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "./CoolLexer.flex"
return TOKEN_IDENTIFIER_OTHER;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 115 "./CoolLexer.flex"
{ /* skip spaces */ }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 116 "./CoolLexer.flex"
lineno++;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 117 "./CoolLexer.flex"
Error("unrecognized character");
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 119 "./CoolLexer.flex"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1870 "CoolLexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 63);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 822 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 63;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 822 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 821);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 119 "./CoolLexer.flex"


void CoolLexer::Error(const char* msg) const
{
    std::cerr << "Lexer error (line " << lineno + 1 << "): " << msg << ": lexeme '" << YYText() << "'\n";
    std::exit(YY_EXIT_FAILURE);
}

void CoolLexer::Escape(){
    const char *input = yytext;
    char *output = yytext;
    input++; // Skip opening '\"'
    while (*(input + 1) /* Skip closing '\"' */ ) {
        if (*input == '\\') {
            input++; // Skip '\\'
            switch (*input) {
                case 'n': *output++ = '\n'; break;
                case 't': *output++ = '\t'; break;
                case 'f': *output++ = '\f'; break;
                case 'b': *output++ = '\b'; break;
                default: *output++ = *input;
            }
        } else {
            *output++ = *input;
        }
        input++;
    }
    *output = '\0'; // Null-terminate the output string
}
